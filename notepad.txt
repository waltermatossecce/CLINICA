
create table Analysis(
AnalysisId int identity(1,1)primary key not null,
Name varchar(50),
State int not null
AudiCreateDate datetime2(7)not null
);

/*LISTA ANALYSIS*/
CREATE PROCEDURE uspAnalysisList
AS
BEGIN
   select 
   AnalysisId,
   AudiCreateDate,
   State,
   Name
   from Analysis
END

exec uspAnalysisList;

CREATE OR ALTER PROCEDURE uspAnalysisById
(
 @AnalysisId int
)
AS
BEGIN
    SELECT 
	 AnalysisId,
	 Name
	FROM Analysis
	Where AnalysisId = @AnalysisId
END

Select * from Analysis;



//procedimiento para guardar analysis
CREATE PROCEDURE uspAnalysisRegister
(
  @Name varchar(100),
  @State int,
  @AudiCreateDate datetime
)
AS
BEGIN

   insert into Analysis
   (
   name,
   State,
   AudiCreateDate
   )
   values
   (
    @Name,
	@State,
	@AudiCreateDate
   );
END

//Para actualizar analysis
CREATE PROCEDURE uspAnalysisEdit
(
 @AnalysisId int,
 @Name varchar(50)
)
AS
BEGIN
  UPDATE Analysis
  set Name = @Name
  where AnalysisId = @AnalysisId
END

//Para eliminar un AnalysisId 
CREATE PROCEDURE uspAnalysisRemove
(
 @AnalysisId int
)
AS
BEGIN
  Delete from Analysis
  where AnalysisId = @AnalysisId
END


//creamos la table examen y el procedimiento almacenado
create table Exams
(
  ExamId int identity(1,1)primary key not null,
  Name varchar(100),
  AnalysisId INT NOT NULL,
  State int not null,
  AuditCreateDate datetime2(7)not null,
  Foreign key (AnalysisId) references Analysis(AnalysisId)
);

CREATE OR ALTER PROCEDURE uspExamList
AS
BEGIN
   SELECT
	   ex.ExamId,
	   ex.Name,
	   a.Name Analysis,
	   ex.AuditCreateDate,
	   case ex.State WHEN 1 THEN 'ACTIVO'
	   ELSE 'INACTIVO'
	   END StateExam
	   from Exams ex
	   inner join Analysis a
	   ON ex.AnalysisId=a.AnalysisId 
END

//busca por id de examen
CREATE OR ALTER PROCEDURE uspExamenById 
(
 @ExamId int
)
AS
BEGIN
  SELECT 
  ex.ExamId,
  ex.Name,
  ex.AnalysisId
  FROM Exams ex
  WHERE ex.ExamId =@ExamId
END

//guardar registro de examen
create or alter procedure uspExamRegister
(
@Name varchar(100),
@AnalysisId int 
)
AS
BEGIN 
   INSERT INTO Exams
   (
   Name,
   AnalysisId,
   State,
   AuditCreateDate
   )
   VALUES
   (
     @Name,
	 @AnalysisId,
	 1,
	 GETDATE()
   )
END
create or alter procedure uspExamenUpdate
(
 @ExamId int,
 @Name varchar(100),
 @AnalysisId int
)
AS
BEGIN
   UPDATE Exams 
   set Name = @Name,
   AnalysisId = @AnalysisId
   WHERE ExamId = @ExamId
END

create or alter procedure uspExamenDelete
(
 @ExamId int
)
AS
BEGIN
   DELETE from Exams
   where ExamId= @ExamId 
END

select * from Exams;

create or alter procedure uspExamenChangeState
(
  @ExamId int,
  @State int
)
AS
BEGIN
    UPDATE Exams
	set State = @State
	WHERE ExamId = @ExamId
END


create table DocumentType
(
  DocumentTypeId int identity(1,1)primary key not null,
  Document varchar(50),
  State int
)
go


create table TypeAges
(
 TypeAgeId int identity(1,1)primary key not null,
 TypeAge varchar(15),
 State int
)
go

create table Genders
(
   GenderId int identity(1,1)primary key not null,
   Gender varchar(25),
   State int 
)
go

Create table Patient
(
  PatientId int identity(1,1)primary key not null,
  Names varchar(100),
  LastName varchar(50),
  MotherMaidenName varchar(50),
  DocumentTypeId int,
  DocumentNumber varchar(25),
  Phono varchar(25),
  TypeAgeId int,
  Age Int,
  GenerId int,
  State int,
  AuditCreateDate datetime2(7),
  FOREIGN KEY(DocumentTypeId) references DocumentType(DocumentTypeId),
  FOREIGN KEY(TypeAgeId) references TypeAges(TypeAgeId),
  FOREIGN KEY(GenerId) references Genders(GenderId),
)

create or alter procedure uspPatientList
AS
BEGIN
   select
   pa.PatientId,
   pa.Names,
   CONCAT_WS('', pa.LastName, pa.MotherMaidenName) SurNames,
   dt.Document documentType,
   pa.DocumentNumber,
   pa.Phono,
   CONCAT_WS(' ' , pa.Age, ta.TypeAge) Age,
   ge.Gender,
   Case pa.State
     WHEN 1 then 'Activo'
	 else 'Inactivo'
	 End StatePatient,
	 pa.AuditCreateDate
   from Patient pa
   INNER JOIN DocumentType dt
   ON pa.DocumentTypeId = dt.DocumentTypeId
   INNER JOIN TypeAges ta
   ON pa.TypeAgeId = ta.TypeAgeId
   INNER JOIN Genders ge
   ON pa.GenerId = ge.GenderId
END

//busca pacientes por id
create or alter procedure uspPatientById 
(
 @PatientId int
)
AS
BEGIN 
    SELECT 
	pa.PatientId,
	pa.Names,
	pa.LastName,
	pa.MotherMaidenName,
	pa.DocumentTypeId,
	pa.DocumentNumber,
	pa.Phono,
	pa.TypeAgeId,
	pa.Age,
	pa.GenerId
	FROM Patient pa
    WHERE PatientId = @PatientId
END

//Procedimiento almacenado para guardar paciente

CREATE OR ALTER PROCEDURE uspPatientRegister
(
  @Names varchar(100),
  @LastName varchar(50),
  @MotherMaidenName varchar(50),
  @DocumentTypeId int,
  @DocumentNumber varchar(25),
  @Phono int,
  @TypeAgeId int,
  @Age int ,
  @GenerId int
)
AS
BEGIN
  INSERT INTO Patient
  (
  Names,
  LastName,
  MotherMaidenName,
  DocumentTypeId,
  DocumentNumber,
  Phono,
  TypeAgeId,
  Age,
  GenerId,
  State,
  AuditCreateDate
  )
  values
  (
  @Names,
  @LastName,
  @MotherMaidenName,
  @DocumentTypeId,
  @DocumentNumber,
  @Phono,
  @TypeAgeId,
  @Age,
  @GenerId,
  1,
  GetDate()
  ) 
END

//actualizamos los pacientes
CREATE OR ALTER PROCEDURE uspPatientUpdate
(
  @PatientId Int,
  @Names varchar(100),
  @LastName varchar(50),
  @MotherMaidenName varchar(50),
  @DocumentTypeId int,
  @DocumentNumber varchar(25),
  @Phono int,
  @TypeAgeId int,
  @Age int,
  @GenerId int
)
AS
BEGIN 

  UPDATE Patient
  set Names = @Names,
  LastName = @LastName,
  MotherMaidenName = @MotherMaidenName,
  DocumentTypeId = @DocumentTypeId,
  DocumentNumber = @DocumentNumber,
  Phono = @Phono,
  TypeAgeId = @TypeAgeId,
  Age = @Age,
  GenerId = @GenerId
  WHERE PatientId = @PatientId
END


CREATE OR ALTER PROCEDURE uspPatientRemove
(
@PatientId int
)
AS
BEGIN
   
   DELETE from Patient
   WHERE PatientId = @PatientId
END

select * from Patient;


CREATE PROCEDURE uspChangeStatePatient
(
  @PatientId int,
  @State int
)
AS
BEGIN

   Update Patient
   set State = @State
   WHERE PatientId = @PatientId
END



--Especialidad de un medico
CREATE TABLE Specialities
(
  SpecialtyId INT IDENTITY(1,1)primary key not null,
  Name varchar(100)not null,
  State Int not null,
  AuditCreateDate datetime2(7)not null 
)

--Creacion de tabla de medicos
CREATE TABLE Medics
(
   MedicId Int Identity(1,1)primary key not null,
   Names varchar(100)not null,
   Lastname varchar(100) not null,
   MotherMaidenName varchar(100)not null,
   Address varchar(255)not null,
   Phone varchar(15)null,
   BithDate date null,
   DocumentTypeId int not null,
   DocumentNumber varchar(25)not null,
   SpecialtyId int not null,
   State int not null,
   AuditCreateDate datetime2(7) not null,
   Foreign key (DocumentTypeId) references DocumentType(DocumentTypeId),
   Foreign key (SpecialtyId) references Specialities(SpecialtyId)
)
go


--Creamos un procedimiento de una listado de medicos y specitialities de medico
CREATE OR ALTER PROCEDURE uspMedicList
AS
BEGIN
   select 
   me.MedicId,
   me.Names,
   CONCAT_WS(' ', me.Lastname, me.MotherMaidenName) surNames,
   sp.Name AS Specialities,
   dt.Document AS DocumentType,
   me.DocumentNumber,
   me.Address,
   me.Phone,
   me.BithDate,
   CASE me.State
      WHEN 1 THEN 'ACTIVO'
	  ELSE 'INACTIVO'
	  End StateMedic,
	  me.AuditCreateDate
   from Medics me
   INNER JOIN DocumentType dt
   ON me.DocumentTypeId = dt.DocumentTypeId
   INNER JOIN Specialities sp
   ON me.SpecialtyId = sp.SpecialtyId
END


--Creamos un procedimiento almacenado de buscar de medicos por su Id
create or alter procedure uspMedicById
(
 @MedicId int
)
AS
BEGIN
 select 
 MedicId,
 Names,
 Lastname,
 MotherMaidenName,
 Address,
 Phone,
 BithDate,
 DocumentTypeId,
 DocumentNumber,
 SpecialtyId
 from Medics me
 where MedicId = @MedicId
END

--Creamos un procedimiento almacenado de registrar medicos
Create or alter procedure uspMedicRegister
(
  @Names varchar(100),
  @Lastname varchar(100),
  @MotherMaidenName varchar(100),
  @Address varchar(255),
  @Phone varchar(15),
  @BithDate varchar(10),
  @DocumentTypeId int,
  @DocumentNumber varchar(25),
  @SpecialtyId int
)
AS
BEGIN
  INSERT INTO Medics
  (
  Names,
  Lastname,
  MotherMaidenName,
  Address,
  Phone,
  BithDate,
  DocumentTypeId,
  DocumentNumber,
  SpecialtyId,
  State,
  AuditCreateDate
  ) 
  VALUES
  (
  @Names,
  @Lastname,
  @MotherMaidenName,
  @Address,
  @Phone,
  CONVERT(DATE, @BithDate),
  @DocumentTypeId,
  @DocumentNumber,
  @SpecialtyId,
  1,
  GETDATE()
  )
END

--Actualizamos la tabla de medicos
Create or alter procedure uspMedicUpdate
(
  @MedicId int,
  @Names varchar(100),
  @Lastname varchar(100),
  @MotherMaidenName varchar(100),
  @Address varchar(255),
  @Phone varchar(15),
  @BithDate varchar(10),
  @DocumentTypeId int,
  @DocumentNumber varchar(25),
  @SpecialtyId int
)
AS
BEGIN
  update Medics
  set Names = @Names,
  Lastname = @Lastname,
  MotherMaidenName = @MotherMaidenName,
  Address =@Address,
  Phone = @Phone,
  BithDate = CONVERT (DATE, @BithDate),
  DocumentTypeId = @DocumentTypeId,
  DocumentNumber = @DocumentNumber,
  SpecialtyId = @SpecialtyId
  WHERE MedicId = @MedicId
END

--creamos un procedimiento para eliminar un medico
create procedure uspMedicRemove
(
 @MedicId int
)
AS
BEGIN
Delete from Medics
where MedicId = @MedicId
END
--Creamos un procedimiento almacenado de actualizar el estado de un medico
create or alter procedure uspChangeStateMedic
(
 @MedicId int,
 @State int
)
AS
BEGIN
  update Medics
  set State =@State
  Where MedicId = @MedicId
END